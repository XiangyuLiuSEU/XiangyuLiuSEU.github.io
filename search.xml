<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[编译时遇到 /tmp 文件夹空间不足的解决办法]]></title>
    <url>%2F2018%2F12%2F11%2FNo-Space-in-tmp%2F</url>
    <content type="text"><![CDATA[今天在服务器上编译 PyTorch 时遇到了 /tmp 文件夹空间不足的问题，一般来说安装 Ubuntu 时给 / 挂载点分配足够的硬盘空间就不会遇到这个问题，但是服务器有很多人用，文件比较混乱，/挂载点已经达到了 100% 的空间使用率，因此百度到了一个解决办法 其实解决方法很简单，只需要在有硬盘空间的挂载点下（例如 /home ）新建一个临时文件夹供编译时临时使用就可以了 新建文件夹在用户目录下新建临时文件夹，并使之生效即可 123cd /home/lxymkdir tmpexport TMPDIR = /home/lxy/tmp 这样重新执行编译命令就可以顺利编译了 还可以将最后一句代码写进 .bashrc 文件，然后 source 一下，以后临时文件都会存放在该临时文件夹 完]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将 DOTA 数据集的标注转换为 COCO 格式]]></title>
    <url>%2F2018%2F12%2F10%2FConvert-dataset-to-coco-like%2F</url>
    <content type="text"><![CDATA[DOTA 数据集：http://captain.whu.edu.cn/DOTAweb/index.htmlCOCO 数据集：http://cocodataset.org/#downloadCOCO API：https://github.com/cocodataset/cocoapiAPI make 报错，安装 Cython 即可 1conda install cython COCO 数据集简介COCO 数据集包含 instance，keypoint 和 caption 等部分，本文只介绍 instance 相关内容 COCO 数据集的组织方式 coco ├── annos.txt (optional) ├── annotations ├── classes.txt (optional) └── images annotations 文件夹放数据集的标注文件（json格式），images 文件夹放数据集的所有图片，（annos.txt 放数据集的原始标注文件，class.txt 放标注的类别名称，每行一个类别，不含背景） COCO 的数据标注格式COCO 数据集以 json 文件格式存储数据集的标注信息，标注的格式可以参考 官网 和这个 知乎专栏，在这里就不重复了。 确定了标注的格式以后，分析 DOTA 数据集的标注格式，可以提取其中的信息然后以 json 格式存储下来就可以了 格式转换脚本1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import jsonimport dota_utils as utilimport osfrom PIL import Imageinfo = &#123;"description": "DOTA dataset from WHU", "url": "http://caption.whu.edu.cn", "year": 2018, "version": "1.0"&#125;licenses = &#123;"url": "http://creativecommons.org/licenses/by-nc/2.0/", "id": 1, "name": "Attribution-NonCommercial License"&#125;categories = []for i, catName in enumerate(util.wordname_15, start=1): categories.append(&#123;"id": i, "name": "%s" % catName, "supercategory": "%s" % catName&#125;)images = []annotations = []aug = "/home/lxy/dota/data/aug"augmented = "/home/lxy/dota/data/augmented"train_small = "/home/lxy/dota/data/train_small"trainsplit_HBB = "/home/lxy/dota/data/trainsplit_HBB"val_small = "/home/lxy/dota/data/val_small"valsplit_HBB = "/home/lxy/dota/data/valsplit_HBB"dataset_path = [augmented, train_small, trainsplit_HBB, val_small, valsplit_HBB]imgid = 0annid = 0for path in dataset_path: img_path = os.path.join(path, "images") label_path = os.path.join(path, "labelTxt") for file in os.listdir(label_path): img_name = file.replace("txt", "png") im = Image.open(os.path.join(img_path, img_name)) w, h = im.size imgid += 1 images.append(&#123;"license": 1, "file_name": "%s" % img_name, \ "height": h, "width": w, "id": imgid&#125;) f = open(os.path.join(label_path, file)) for line in f.readlines(): line = "".join(line).strip("\n").split(" ") # a bbox has 4 points, a category name and a difficulty if len(line) != 10: print(path, file) else: annid += 1 catid = util.wordname_15.index(line[-2]) + 1 w_bbox = int(line[4][:-2]) - int(line[0][:-2]) h_bbox = int(line[5][:-2]) - int(line[1][:-2]) bbox = [line[0], line[1], str(w_bbox)+'.0', str(h_bbox)+'.0'] annotations.append(&#123;"id": annid, "image_id": imgid, "category_id": catid, \ "segmentation": [line[0:8]], "area": float(w_bbox*h_bbox), \ "bbox": bbox, "iscrowd": 0&#125;) f.close()my_json = &#123;"info": info, "licenses": licenses, "images": images, "annotations": annotations, "categories": categories&#125;with open("/home/lxy/dota/data/coco/annotations/train.json", "w+") as f: json.dump(my_json, f) print("writing json file done!") 检查转换结果这里需要用到 COCO API，具体用法参考 repo 里的 demo 文件，读取转换完成的数据集并显示标注结果，观察标注是否有误 完]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据集</tag>
        <tag>COCO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NP-Hard问题]]></title>
    <url>%2F2018%2F12%2F07%2FNP-Hard%2F</url>
    <content type="text"><![CDATA[简单理解 NP, P, NP-Complete 和 NP-Hardref: https://www.cnblogs.com/sancyun/p/4250360.html P 是一类可以通过确定性图灵机（以下简称 图灵机）在多项式时间 (Polynomial time) 内解决的问题集合。 NP 是一类可以通过非确定性图灵机 ( Non-deterministic Turing Machine) 在多项式时间 (Polynomial time) 内解决的决策问题集合。 P 是 NP 的子集，也就是说任何可以被图灵机在多项式时间内解决的问题都可以被非确定性的图灵机解决。 接下来说说 NP 里最难得问题 NP-Complete。 其定义如下， 如果一个决策问题 L 是 NP-Complete 的，那么 L 具备以下两个性质： L 是 NP（给定一个解决 NP-Complete 的方案 (solution，感兴趣的读者可以思考一下 solution 和 answer 的区别)，可以很快验证是否可行，但不存在已知高效的方案 。） NP 里的任何问题可以在多项式时间内转为 L。 而 NP-Hard 只需要具备 NP-Complete 的第二个性质，因此 NP-Complete 是 NP-Hard 的子集。 这四者的关系如下图（假设 P!= NP）：]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>NP-Hard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F07%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
