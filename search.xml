<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PyTorch ÁöÑ dataloader Â¶Ç‰ΩïËØªÂèñÂèòÈïøÊï∞ÊçÆ]]></title>
    <url>%2F2019%2F04%2F03%2Fpytorch-dataloader-load-different-length-data%2F</url>
    <content type="text"><![CDATA[Êú¨ÊñáËΩ¨ËΩΩËá™ Áü•‰πé CharlieÁöÑËØ≠Èü≥Â§ÑÁêÜÂÆûÈ™åÂÆ§ ÂéüÊñáÈìæÊé•Ôºöhttps://zhuanlan.zhihu.com/p/60129684 ÊúÄËøëÂú®ÂÅö‰∏Ä‰∏™Êñ∞ÁöÑÂ£∞Â≠¶Ê®°ÂûãÔºåÂÖ∂‰∏≠ÈÅáÂà∞‰∏Ä‰∏™ÁÇπÂ∞±ÊòØÊØè‰∏™sentenceÁöÑÈïøÂ∫¶‰∏ç‰∏ÄÊ†∑ÁöÑËä±ÔºåÁõ¥Êé•Áî®dataloaderÁöÑËØªÂèñÊòØÊúâÈóÆÈ¢òÁöÑ„ÄÇÊü•‰∫Ü‰∏ã‰∏≠ÊñáËµÑÊñôÔºåÂ§ßÂÆ∂Â§ßÂ§öÊï∞Ëøô‰∏™ÈóÆÈ¢òÈÉΩÊòØË∂ã‰∫éÁî®torch.nn.utils.rnn.PackedSequenceÊù•ÊâìÂåÖÁöÑÔºåËøô‰∏™Âú®dataloaderÈáåÈù¢ÂÖ∂ÂÆûÂ∞±‰∏çÂ§™ÈÄÇÁî®ÔºåpytorchËÆ∫Âùõ‰∏äÊèêÂà∞Áî®dataloaderÁöÑcollate_fnÊù•Â§ÑÁêÜÁöÑÔºåÊâÄ‰ª•ÊÉ≥ÂÜô‰∏™ËµÑÊñôÊÄªÁªì‰∏ã „ÄÇ pytorchÈáåÈù¢datasetÁöÑÂ∑•‰ΩúÈÄªËæëÔºö pytorchÁöÑÊï∞ÊçÆËΩΩÂÖ•‰∏ªË¶ÅÊòØËøô‰πàÂá†‰∏™ÈÄªËæëÔºå‰ªéÂ∫ïÂ±Ç‰∏ÄÊ≠•Ê≠•Êù•ËÆ≤ÔºåÊàëÁî®h5Áü©ÈòµÔºåÂõæÁâáÂíåÈü≥È¢ë‰∏â‰∏™ÊñπÈù¢Êù•‰∏æ‰æãÔºåÈ¶ñÂÖàÊòØÈÄªËæëÂ±ÇÊ¨°ÊòØÔºåÈ¶ñÂÖàÊäädataË£ÖËøõÁî®torch.utils.data.DatasetË£ÖËøõ‰∏Ä‰∏™datasetÁöÑÂØπË±°ÈáåÈù¢ÔºåÁÑ∂ÂêéÂú®ÊäädatasetËøô‰∏™ÂØπË±°‰º†ÈÄíÁªô‰∏Ä‰∏™torch.utils.data.DataLoader datasetÁöÑÂ∑•‰ΩúÈÄªËæë Êï∞ÊçÆÈõÜÁöÑÂàáÂàÜ‰∏ÄËà¨Âú®datasetËøô‰∏™ÂØπË±°‰∏äÂÅöÂ§ÑÁêÜÔºåÊîØÊåÅÈöèÊú∫ÂàáÂàÜÁ≠âÔºåËØ¶ËßÅtorch.utils.data - PyTorch master documentationÔºå‰∏ÄËà¨Êù•ËÆ≤ÔºåÊàëÈÉΩÊòØÂÜô‰∏Ä‰∏™torch.utils.data.DatasetÁöÑÂ≠êÁ±ªÔºåÈáåÈù¢Â∞±‰∏â‰∏™ÊàêÂëòÂáΩÊï∞ÔºåÂàùÂßãÂåñÔºåÈïøÂ∫¶ÂíåËØªÂèñÔºå‰∏ÄËà¨Âú®ËØªÂèñ‰Ω†Ëá™Â∑±ÂÆö‰πâÁöÑËØªÂèñÊñπÊ≥ïÔºåÊàë‰π†ÊÉØÁöÑÊòØh5Áü©ÈòµÁöÑËØùÔºåÂ∞±ËØª‰∏ÄÊÆµÔºàÂ≠êÁü©ÈòµÔºâÔºåÂõæÁâáÂ∞±ÊòØ‰∏ÄÂº†ÂõæÔºåÊàñËÄÖ‰∏ÄÊÆµÈü≥È¢ë„ÄÇ ËøôÈáåÈù¢Êúâ‰∏™ÂæàÂÖ≥ÈîÆÁöÑÁÇπÔºåÂ∞±ÊòØdatasetÁöÑÈÄªËæëÊòØ‰∏ÄÊ¨°ËØª‰∏Ä‰∏™itemÔºåÊúÄÂ•Ω‰∏çË¶ÅÂú®datasetÂ±ÇÈù¢‰∏ÄÊ¨°slice‰∏ÄÊÆµÔºåsliceËøô‰∏™Â±ÇÈù¢ÁöÑ‰∫ãÊÉÖ‰∫§ÁªôdataloaderÊù•ÂÅöÔºåÂéüÂõ†Êàë‰∏Ä‰ºöËØ¥„ÄÇ ËÆ∞‰ΩèdatasetÁöÑÈÄªËæëÂú®‰∫éË£ÖÂíåitemËØªÂèñÔºåÈ¢ÑÂ§ÑÁêÜÔºåÂÖ∂‰ªñÈÉΩ‰∏çË¶ÅÂÅö„ÄÇ dataloaderÁöÑÂ∑•‰ΩúÈÄªËæë dataloaderÂ±ÇÈù¢‰∏ªË¶ÅÂ∞±ÊòØsliceËØªÂèñÊï∞ÊçÆÔºåshuffle‰πüÊòØÂú®Ëøô‰∏™Â±ÇÈù¢Êù•ÂÅö„ÄÇ dataloaderÊúâÂá†‰∏™ÂÖ≥ÈîÆÁÇπÔºåÂæàÂ§öÂú∞ÊñπÈÉΩÈõ∂Èõ∂Á¢éÁ¢éÁöÑÊèêÂà∞ËøáÔºåÊàëÊÄªÁªì‰∏ãÔºå ÊòØÁ®ÄÊùæÂπ≥Â∏∏ÁöÑbatch_size, sampler, shuffleËøôÂá†‰∏™Á®ÄÊùæÂπ≥Â∏∏ÁöÑ‰∏çÊèêÔºåshuffleÊòØÂú®datasetÁöÑitemÂ±ÇÈù¢ÂÅöÊ∑∑Ê¥óÔºå Ê≥®ÊÑèÔºånum_workersÊòØ‰∏Ä‰∏™Â§öÁ∫øÁ®ãÁöÑËØªÂèñÔºåÂΩìbatchsize&gt;1ÁöÑÊó∂ÂÄôÔºåÂ§öÁ∫øÁ®ãËØªÂèñitem, ÁÑ∂ÂêéÂêÑ‰∏™itemË∞ÉÁî®‰∏Ä‰∏™collate_fnÂêàÂπ∂ÊàêÊñ∞ÁöÑtensorÔºåÂÖ∂‰∏≠h5‰æùÁÑ∂ÊòØ‰∏™ÂùëÔºåanacondaÂÆâË£ÖÁöÑh5ÊòØ‰∏çÊîØÊåÅÂ§öÁ∫øÁ®ãÁöÑÔºåËØ∑ÂèÇËÄÉÂπ∂Ë°å HDF5 Âíå h5pyÂÆâË£ÖÂπ∂Ë°åh5ÔºåËá≥‰∫énum*_*worker‰ª•Âèäpin_memoruÁöÑÂÖ∑‰Ωì‰ΩøÁî®ÔºåÂèÇËÄÉ‰∫ëÊ¢¶ÔºöPytorch ÊèêÈÄüÊåáÂçóÔºå‰∏çÈáçÂ§çÈÄ†ËΩÆÂ≠ê„ÄÇ ÂÖ≥‰∫éËøô‰∏™collate\fnÊòØÈáçÁÇπÔºåÂΩìÂºÄÂêØÂ§öÁ∫øÁ®ã‰∫Ü‰∏Ä‰∏™ÔºåÂ§öÁ∫øÁ®ãÂÖàÂêéËØªÂèñ‰∫ÜdatasetÈáåÈù¢batch_size‰∏™item‰ª•ÂêéÔºåÁîüÊàê‰∫Ü‰∏Ä‰∏™list,ÈáåÈù¢ÊØè‰∏™ÂÖÉÁ¥†Â∞±ÊòØbatchsize‰∏™itemÔºåÁÑ∂ÂêéÁî®collatefnÂêàÂπ∂ÔºåÂ¶ÇÊûúÊ≤°ÊúâÊåáÂÆöÁöÑcollatefnsÁöÑËØùÔºåÂ∞±Áõ¥Êé•ÂêàÂπ∂Êàê‰∏Ä‰∏™È´ò‰∏ÄÁª¥ÁöÑtensor„ÄÇ collatefnsÁöÑÂ∑•‰ΩúÈÄªËæë coolatefnsÁöÑËæìÂÖ•ÊòØ‰∏™listÔºåÈïøÂ∫¶‰∏∫batchsizeÔºåÂÖ∂‰∏≠ÂêÑ‰∏™ÂÖÉÁ¥†ÊòØÂêÑ‰∏™itemÔºåÂáΩÊï∞ÁöÑÁõÆÁöÑÂ∞±ÊòØÂêàÂπ∂„ÄÇ ÂΩìÂêÑ‰∏™itemÂèòÈïøÊó∂Ôºå‰∏çÊåáÂÆöcollatefnsÂêàÂπ∂Â∞±‰ºöÊä•ÈîôÔºåÊáí‰∫∫ÊñπÊ≥ïÂ∞±ÊòØÊääÂú®datasetÈáåÈù¢ÁöÑËØªÂèñÂáΩÊï∞ÊäätensorÂä†Âà∞ÊúÄÈïøÔºåÂ∞±ÂèØ‰ª•Áõ¥Êé•merge„ÄÇ ÂΩì‰ΩøÁî®collatefnsÊó∂ÔºåpytorchËÆ∫Âùõ‰∏äÊúâ‰∫∫ÂÜô‰∫Ü‰∏Ä‰∏™ÂáΩÊï∞ÔºåÊàëË¥¥ËøáÊù•ÔºåÂ§ßÂÆ∂ÈÖçÂêàÊ≥®ÈáäÁúãÁúãÔºö 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849def pad_tensor(vec, pad, dim): """ args: vec - tensor to pad pad - the size to pad to dim - dimension to pad return: a new tensor padded to 'pad' in dimension 'dim' """ pad_size = list(vec.shape) pad_size[dim] = pad - vec.size(dim) return torch.cat([vec, torch.zeros(*pad_size)], dim=dim)class PadCollate: """ a variant of callate_fn that pads according to the longest sequence in a batch of sequences """ def __init__(self, dim=0): """ args: dim - the dimension to be padded (dimension of time in sequences) """ self.dim = dim def pad_collate(self, batch): """ args: batch - list of (tensor, label) reutrn: xs - a tensor of all examples in 'batch' after padding ys - a LongTensor of all labels in batch """ # find longest sequence max_len = max(map(lambda x: x[0].shape[self.dim], batch)) # pad according to max_len batch = map(lambda (x, y): (pad_tensor(x, pad=max_len, dim=self.dim), y), batch) # stack all xs = torch.stack(map(lambda x: x[0], batch), dim=0) ys = torch.LongTensor(map(lambda x: x[1], batch)) return xs, ys def __call__(self, batch): return self.pad_collate(batch) Ë∞ÉÁî®‰ΩøÁî®Ôºö 1train_loader = DataLoader(ds, ..., collate_fn=PadCollate(dim=0)) Êù•Ê∫êÔºöDataLoader for various length of data ÂØπ‰∫éËØªÂèñ‰∫Ü‰ª•ÂêéÁöÑÊï∞ÊçÆÔºåÂú®rnn‰∏≠ÁöÑÂ∑•‰ΩúÈÄªËæëÔºåpytorchÁöÑÊñáÊ°£‰πüÊèêÂà∞Ëøá total_length is useful to implement the packsequence-&gt;recurrentnetwork-&gt;unpacksequence pattern in a Module wrapped in DataParallel. See this FAQ sectionfor details. Êù•Ê∫êÔºötorch.nn - PyTorch master documentation ÂÖ≥‰∫éËØªÂèñÂà∞‰∫ÜÁöÑpaddingÁöÑÂèòÈïøÊï∞ÊçÆÔºåÂ¶Ç‰ΩïpackÔºåËØ∑ÂèÇËÄÉ @Â∞πÁõ∏Ê•† ÁöÑÔºö Â∞πÁõ∏Ê•†ÔºöPyTorch ËÆ≠ÁªÉ RNN Êó∂ÔºåÂ∫èÂàóÈïøÂ∫¶‰∏çÂõ∫ÂÆöÊÄé‰πàÂäûÔºü]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[„ÄêËΩ¨ËΩΩ„Äë ËÖæËÆØÁÆóÊ≥ïÂÆû‰π†Èù¢Áªè]]></title>
    <url>%2F2019%2F04%2F03%2Frepost-tencent-intern-interview-summary%2F</url>
    <content type="text"><![CDATA[ÁâõÂÆ¢ÁΩë ËÖæËÆØÁÆóÊ≥ïÂÆû‰π†Èù¢ËØïÊÄªÁªì‚ÄîËÆ∫Èù¢ËØïÂÆòËôêÊàëÁöÑ‰∏ÄÁôæÁßçÊñπÂºè]]></content>
      <categories>
        <category>Ê±ÇËÅå</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git ‰ΩøÁî®Á¨îËÆ∞]]></title>
    <url>%2F2019%2F04%2F03%2Fgit-note%2F</url>
    <content type="text"><![CDATA[ÂªñÈõ™Â≥∞ÁöÑ Git ÊïôÁ®ã Â∞ëÁî® Pull Â§öÁî® Fetch Âíå Merge ËßÅÂà∞ÂæàÂ§ö‰∫∫ËØ¥ËøáËøô‰∏™ÁªèÈ™åÔºåÂéüÂõ†Â∞±ÊòØ git pull ÊääËøáÁ®ãÁöÑÁªÜËäÇÈÉΩÈöêËóè‰∫ÜËµ∑Êù•ÔºåÂ§ßÈÉ®ÂàÜÊó∂ÂÄôÊòØÊ≤°ÊúâÈóÆÈ¢òÁöÑÔºå‰ΩÜÊòØÂΩì‰ª£Á†ÅÂá∫ÈîôÊó∂ÂèØËÉΩ‰ºöÈÄ†ÊàêÊçüÂ§±„ÄÇÂæàÂ§öÊó∂ÂÄôÊàë‰ª¨ÂÆÅÊÑøÂÅöÁöÑÊÖ¢‰∏Ä‰∫õÔºå‰πü‰∏çÊÑøÊÑèËøîÂ∑•ÈáçÊù• ‰∏ÄËà¨ÁöÑÂÅöÊ≥ïÊòØÔºö 12git fetch origin # ‰∏ãËΩΩËøúÁ®ãÂàÜÊîØÁöÑÊõ¥Êñ∞git merge origin/master # ÂêàÂπ∂ËøúÁ®ãÂàÜÊîØÂà∞ÂΩìÂâçÂàÜÊîØ Â¶ÇÊûú‰Ω†ÊÉ≥Âú®ÂêàÂπ∂ÂâçÊü•ÁúãÊú¨Âú∞ÂàÜÊîØÂíåËøúÁ®ãÂàÜÊîØÁöÑÂ∑ÆÂºÇÔºåÂèØ‰ª•‰ΩøÁî®‰∏ãÈù¢ÁöÑÂëΩ‰ª§Ôºö 1git diff master origin/master ÂçïÁã¨ËøõË°å‰∏ãËΩΩÂíåÂêàÂπ∂ÊòØ‰∏Ä‰∏™Â•ΩÁöÑÂÅöÊ≥ïÔºå‰Ω†ÂèØ‰ª•ÂÖàÁúãÁúã‰∏ãËΩΩÁöÑÊòØ‰ªÄ‰πàÔºåÁÑ∂ÂêéÂÜçÂÜ≥ÂÆöÊòØÂê¶ÂíåÊú¨Âú∞‰ª£Á†ÅÂêàÂπ∂ÔºåÊñπ‰æø‰ΩøÁî®„ÄÇ]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nvcc ÁºñËØëÊä•ÈîôÔºöÊâæ‰∏çÂà∞ "cuda_runtime.h"]]></title>
    <url>%2F2019%2F04%2F02%2Fnvcc-fatal-error-cuda-runtime-h%2F</url>
    <content type="text"><![CDATA[Â•áÊÄ™ÁöÑÈîôËØØ ‰ªäÂ§©Âú®ÂÆâË£Ö PANet Êó∂ÈÅáÂà∞‰∫Ü‰∏Ä‰∏™Â•áÊÄ™ÁöÑÈîôËØØÔºö 12Compiling nms kernels by nvcc...cc1plus: fatal error: cuda_runtime.h: No such file or directory ÊåâÁêÜËØ¥‰∏çÂ∫îËØ•Âá∫Áé∞ËøôÁßçÂ•áÊÄ™ÁöÑÈîôËØØÔºåcuda_runtime.h Â∞±ÂÆâÈùôÂú∞Ë∫∫Âú® /usr/local/cuda/include ÁõÆÂΩï‰∏ãÔºåcuda ÂÆâË£ÖÊòØÊ≤°ÊúâÈóÆÈ¢òÁöÑÔºåËøô‰∏™‰ªìÂ∫ìÂú®ÂÆûÈ™åÂÆ§ÁöÑÊúçÂä°Âô®‰∏ä‰πüË∑ëËøáÔºåÂÆåÂÖ®Ê≤°ÊúâÈóÆÈ¢ò„ÄÇÁÑ∂ËÄåÂ∞±ÊòØËøôÊ†∑ÁöÑÈîôËØØË¥π‰∫ÜËÄÅÂçäÂ§©Êó∂Èó¥‰πüÊó†Ê≥ïÂÆö‰ΩçÂéüÂõ†ÔºåÁΩë‰∏äÁöÑËß£ÂÜ≥ÂäûÊ≥ïÊó†ÈùûÂ∞±ÊòØÁéØÂ¢ÉÂèòÈáèÁöÑÈóÆÈ¢òÔºåÂ§öÊ¨°Á°ÆËÆ§‰πãÂêéÁéØÂ¢ÉÂèòÈáèÊòØÊ≤°ÊúâÈóÆÈ¢òÁöÑ üò© ÈöæÈÅìË¶ÅÂõ†‰∏∫Ëøô‰∏™ÈîôËØØÈáçË£Ö cudaÔºü ÈáçË£ÖÊòØ‰∏çÂ§™ÂèØËÉΩÁöÑÔºåÊúçÂä°Âô®‰∏äÈÖçÁéØÂ¢ÉÂ§™Ë¥π‰∫ãÔºå ‰∫éÊòØÊü•Áúã nvcc ÂëΩ‰ª§Â∏ÆÂä©ÔºåÊûúÁÑ∂ÂÖ∂‰∏≠ÂÜôÁùÄÂèØ‰ª•Áî® -I ÈÄâÈ°πÊåáÂÆöÂåÖÂê´Â§¥Êñá‰ª∂ÁöÑË∑ØÂæÑÔºåËøÖÈÄüÂú® PANet/lib/make.sh ‰∏≠ÊúâÂÖ≥ nvcc ÁöÑÂëΩ‰ª§Âä†‰∏ä -I /usr/local/cuda/include ÔºåËøêË°åÔºåÊàêÂäü üòé ‰º∞ËÆ°ÊòØÁéØÂ¢ÉÂèòÈáèÂá∫Áé∞‰∫ÜÊüêÁßçÈîôËØØÔºåËôΩÁÑ∂Âà∞ÊúÄÂêé‰πüÊ≤°ÊúâÊêûÊòéÁôΩ‰∏∫‰ªÄ‰πà‰ºöÂá∫Áé∞Ëøô‰∏™ÈîôËØØÔºå‰ΩÜÂ•ΩÊ≠πÊòØËß£ÂÜ≥‰∫ÜËøô‰∏™ÈóÆÈ¢ò„ÄÇËøô‰∏™ÈóÆÈ¢òËØ¥Êòé‰∫ÜÈÅá‰∫ã‰∏çËÉΩÂè™Èù†ÁôæÂ∫¶ÔºåË¶ÅËá™Â∑±Â•ΩÂ•ΩÂàÜÊûê]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>cuda</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÈÄöËøá SSH ÈößÈÅìËøûÊé•ËøúÁ®ãÊúçÂä°Âô®ÁöÑ Jupyter Notebook]]></title>
    <url>%2F2019%2F02%2F24%2FRemote-jupyter-notebook%2F</url>
    <content type="text"><![CDATA[ÂèÇËÄÉ: https://www.howtoing.com/how-to-install-run-connect-to-jupyter-notebook-on-remote-server Âú®ËøúÁ®ãÊúçÂä°Âô®‰∏äÊ≤°ÊúâÂÆâË£ÖÊµèËßàÂô®ÁöÑÊÉÖÂÜµ‰∏ãÔºåÈÄöËøáÂú®Êú¨Âú∞Âª∫Á´ã SSH ÈößÈÅìÁöÑÊñπÊ≥ï‰ΩøÁî®ÊúçÂä°Âô®ÁöÑ Jupyter Notebook 1. ÊúçÂä°Âô®Á´Ø È¶ñÂÖàÁ°Æ‰øùÊúçÂä°Âô®Á´ØÂÆâË£Ö‰∫Ü Jupyter NotebookÔºåÂ¶ÇÊûúÈúÄË¶Å‰ΩøÁî® conda ÁéØÂ¢ÉÔºåËøòË¶ÅÂÆâË£Ö ipykernel Á≠âÂåÖ ËøõÂÖ•ËôöÊãüÁéØÂ¢ÉÔºåËøêË°å Jupyter Notebook 1jupyter notebook Ê†πÊçÆËæìÂá∫ÁöÑ‰ø°ÊÅØÂèØ‰ª•ÁúãÂà∞Êó†Ê≥ïÊâæÂà∞ÂèØÁî®ÁöÑÊµèËßàÂô® 12345[I 09:56:37.551 NotebookApp] Serving notebooks from local directory: /home/liuxiangyu[I 09:56:37.551 NotebookApp] The Jupyter Notebook is running at:[I 09:56:37.552 NotebookApp] http://172.17.0.2:8888/?token=******[I 09:56:37.552 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).[W 09:56:37.557 NotebookApp] No web browser found: could not locate runnable browser. Ê≥®ÊÑèÔºöÂ¶ÇÊûúÊä•Èîô‰ø°ÊÅØÊèêÁ§∫Âú∞ÂùÄÂ∑≤ÁªèË¢´Âç†Áî®ÔºåÈÇ£‰πà‰πÖÈúÄË¶Å‰øÆÊîπ‰∏Ä‰∏ã Jupyter Notebook ÁöÑÈªòËÆ§Âú∞ÂùÄ„ÄÇ‰øÆÊîπÊñπÂºèÂ¶Ç‰∏ãÔºö ÈÖçÁΩÆ Jupyter Notebook 1jupyter notebook --generate-config ËøêË°åÂëΩ‰ª§ÂêéÂ∞Ü‰ºöÂú®‰∏ªÁõÆÂΩï‰∏ãÁîüÊàê .jupyter/jupyter_notebook_config.py Êñá‰ª∂ÔºåÊâìÂºÄÊñá‰ª∂ÊâæÂà∞ #c.NotebookApp.ip = 'localhost'ÔºåÊää # Âè∑ÂéªÊéâÔºålocalhost ÊîπÊàêËá™Â∑±ÁöÑ ip Âú∞ÂùÄÔºàÂú®‰∏äÈù¢ËæìÂá∫‰ø°ÊÅØ‰∏≠ÂèØ‰ª•ÁúãÂà∞Ôºâ ‰øùÂ≠òÂêéÂÖ≥Èó≠Êñá‰ª∂ÔºåÈáçÂêØ Jupyter Notebook Âç≥ÂèØ Ëá≥Ê≠§ÔºåÊúçÂä°Âô®Á´ØÁöÑÂáÜÂ§áÂ∑≤ÁªèÂÆåÊàê‰∫ÜÔºåÊàë‰ª¨ÈúÄË¶ÅËÆ∞‰ΩèÊúçÂä°Âô®ÁöÑÂú∞ÂùÄ 172.17.0.2 ÂíåÁ´ØÂè£Âè∑ 8008 2. Êú¨Âú∞ ‰ª• Windows Á≥ªÁªü‰∏∫‰æãÔºå‰∏ãËΩΩ putty ÊâìÂºÄ putty ÂêéÂú®ÊúçÂä°Âô®Âú∞ÂùÄÂíåÁ´ØÂè£Â§ÑÊ≠£Á°ÆÂ°´ÂÜô‰ø°ÊÅØÔºåÁÑ∂ÂêéÂú®Â∑¶‰æß ssh ÈÄâÈ°π‰∏ãÈÄâÊã© Tunnels Source port Â°´ÂÜôÊú¨Âú∞ÊÉ≥Áî®ÁöÑÁ´ØÂè£Âè∑Ôºå‰ª• 8000 ‰∏∫‰æã Destination Â°´ÂÜô ÊúçÂä°Âô®Âú∞ÂùÄ 172.17.0.2:8888 ÂÖ∂‰ªñÈÄâÈ°π‰∏çË¶Å‰øÆÊîπÔºåÊúÄÂêé‰∏çË¶ÅÂøòËÆ∞ÁÇπÂáª AddÔºåÁÑ∂ÂêéËøûÊé•Âç≥ÂèØ ËøûÊé•Âà∞ÊúçÂä°Âô®ÂêéËøõÂÖ•Áõ∏Â∫îÁöÑËôöÊãüÁéØÂ¢ÉÔºåËøêË°å Jupyter NotebookÔºåÁÑ∂ÂêéÊâìÂºÄÊµèËßàÂô®ËæìÂÖ•Âú∞ÂùÄ https://localhost:8000 Âç≥ÂèØÊâìÂºÄ notebook. Á¨¨‰∏ÄÊ¨°ËøõÂÖ• notebook ÂèØËÉΩÈúÄË¶ÅËæìÂÖ• tokenÔºåÊåâÁÖßÊèêÁ§∫ËæìÂÖ•Áõ∏Â∫îÁöÑ token Âç≥ÂèØ Done! üòé]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Detectron ÂÆâË£ÖÊ≠•È™§]]></title>
    <url>%2F2019%2F01%2F20%2Fdetectron-installation%2F</url>
    <content type="text"><![CDATA[RequirementsÔºö Linux 16.04, Python2, NVIDIA GPU (Detectron ÁõÆÂâçÂè™Êúâ GPU ÁâàÊú¨) CUDA 9.0, cuDNN7.0.5 Caffe2, COCO API ‰∏∫‰øùÊåÅ Python ÁéØÂ¢ÉÁöÑÁã¨Á´ãÊÄß‰∏éÂÆåÊï¥ÊÄßÔºåÂÆâË£ÖÂâçÊñ∞Âª∫‰∏Ä‰∏™Êñ∞ÁöÑËôöÊãüÁéØÂ¢ÉÔºå‰ª•‰∏ãÂÆâË£ÖËøáÁ®ãÂú®ËôöÊãüÁéØÂ¢É‰∏≠ËøõË°å 123# Âú®‰∏ªÁéØÂ¢É‰∏ãconda create -n detectron python=2.7source activate detectron [TOC] CUDA &amp; cuDNN ÂÆâË£Ö CUDA9.0 Âíå cuDNN7.0.5ÔºåÂÖ∑‰ΩìÂÆâË£ÖÊ≠•È™§ÂèÇËÄÉËã±‰ºüËææÂÆòÁΩë Caffe2 1. ‰ªéÊ∫êÁ†ÅÁºñËØë ‰ª•‰∏ã‰∏∫Ê∫êÁ†ÅÁºñËØëÁöÑËøáÁ®ãÔºåÂ∞ùËØïËøáÂÆâË£Ö Pre-Built BinariesÔºåÁªìÊûúÂ§±Ë¥•‰∫ÜÔºå‰πüÂèØ‰ª•Áõ¥Êé•ÂÆâË£ÖÈ¢ÑÁºñËØëÊñá‰ª∂ÔºàÊé®ËçêÔºâÔºå[2. ÂÆâË£ÖÈ¢ÑÁºñËØëÊñá‰ª∂](#2. ÂÆâË£ÖÈ¢ÑÁºñËØëÊñá‰ª∂) ÂÆâË£Ö‰æùËµñÂåÖ 1234567891011121314151617181920212223242526sudo apt-get updatesudo apt-get install -y --no-install-recommends \ build-essential \ git \ libgoogle-glog-dev \ libgtest-dev \ libiomp-dev \ libleveldb-dev \ liblmdb-dev \ libopencv-dev \ libopenmpi-dev \ libsnappy-dev \ libprotobuf-dev \ openmpi-bin \ openmpi-doc \ protobuf-compiler \ python-dev \ python-pip \ libgflags-dev \ cmakepip install --user \ future \ numpy \ protobuf \ typing \ hypothesis pip install ‰ΩøÁî®ÈªòËÆ§ÈïúÂÉè‰∏ãËΩΩÈÄüÂ∫¶ËæÉÊÖ¢ÔºåÂèØ‰ª•ÈÄâÊã©‰ΩøÁî®Ê∏ÖÂçéÂ§ßÂ≠¶ pypi ÈïúÂÉè 123456# for temporary usepip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package# set to defaultpip install pip -U # upgrade pip to the latest version (&gt;=10.0.0)pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple ‰∏ãËΩΩ‰ª£Á†Å‰ªìÂ∫ìÂπ∂ÁºñËØë 1234git clone https://github.com/pytorch/pytorch.git &amp;&amp; cd pytorchgit submodule update --init --recursive # ÂÆâË£ÖÊâÄÈúÄÂ≠êÊ®°Âùóconda install pyyaml # ÂÆâË£ÖÁº∫Â∞ëÁöÑ‰æùËµñÂåÖpython setup.py install Â¶ÇÊûúÁºñËØëÈ°∫Âà©ÈÄöËøáÔºåÊÅ≠ÂñúÔºåÊé•‰∏ãÊù•ÊµãËØï caffe2 ÂÆâË£ÖÊòØÂê¶Ê≠£Á°ÆÔºå[3. ÂÆâË£ÖÂêéÊµãËØï](#3. ÂÆâË£ÖÂêéÊµãËØï) ÈîôËØØ‰ø°ÊÅØ1ÔºöÊúçÂä°Âô®ÂÆâË£ÖÁöÑ git Âú®ÊâßË°å clone ÂëΩ‰ª§Êó∂Êä•ÈîôÊâæ‰∏çÂà∞ https ÂçèËÆÆÔºåÂ∫îËØ•ÊòØÂÆâË£Ö‰∏çÂÆåÊï¥ÂØºËá¥ÁöÑÔºåÂèØ‰ª•Âú®ÂΩìÂâçÁéØÂ¢É‰∏ãÈáçÊñ∞ÂÆâË£Ö git ÂêéÈáçËØïÔºà‰ΩøÁî®ÂëΩ‰ª§ conda install gitÔºåÊé®ËçêÔºâÊàñËÄÖ‰ΩøÁî®‰ª•‰∏ãÂëΩ‰ª§‰ª£ÊõøÔºö 1git clone git://github.com/pytorch/pytorch.git &amp;&amp; cd pytorch ÈîôËØØ‰ø°ÊÅØ2ÔºàÊú™Ëß£ÂÜ≥ÔºâÔºöÂú®ÊâßË°åÂÆâË£ÖÂëΩ‰ª§Êó∂ (python setup.py install)ÔºåÂá∫Áé∞‰ª•‰∏ãÈîôËØØÔºö 1¬∑¬∑¬∑¬∑¬∑¬∑/libmklml_intel.so: file not recognized: File truncated. ËØ•ÈîôËØØÊåáÂêë pytorch/third_party/ideep/mkl-dnn/external/mklml_lnx_2019.0.1.20180928/lib/libmklml_intel.so Êñá‰ª∂ÔºåÂèØËÉΩÊòØÊñá‰ª∂‰∏çÂÆåÊï¥ÂØºËá¥ÁöÑÈîôËØØÔºå‰ΩÜÊòØÊú™ÊâæÂà∞ÂéüÂõ†ÂèäËß£ÂÜ≥ÊñπÊ≥ï„ÄÇÂ¶ÇÊûúÂá∫Áé∞Ê≠§ÈîôËØØËØ∑Â∞ùËØïÈÄöËøáÈ¢ÑÁºñËØëÊñá‰ª∂ÂÆâË£Ö caffe2. ÂÖ∂‰ªñÈîôËØØÔºöÊü•Áúã Caffe2 troubleshooting 2. ÂÆâË£ÖÈ¢ÑÁºñËØëÊñá‰ª∂ Caffe2 Âè™Êèê‰æõ Anaconda ÁöÑÈ¢ÑÁºñËØëÂÆâË£ÖÂåÖÔºåÈúÄË¶ÅÂÆâË£Ö Anaconda Êàñ Miniconda È¶ñÂÖàÊ∑ªÂä†Ê∏ÖÂçéÂ§ßÂ≠¶Áª¥Êä§ÁöÑ PyTorch Ê∫êÔºå‰∏ãËΩΩÈÄüÂ∫¶Êõ¥Âø´Ôºö 1conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ ÁÑ∂ÂêéÊâßË°åÂÆâË£ÖÊìç‰ΩúÔºö 1conda install pytorch-nightly 3. ÂÆâË£ÖÂêéÊµãËØï ÂÆâË£ÖÂÆåÊàêÂêéÔºåÊµãËØïÂÆâË£ÖÊòØÂê¶ÊàêÂäü 123456# To check if Caffe2 build was successfulpython -c 'from caffe2.python import core' 2&gt;/dev/null &amp;&amp; echo "Success" || echo "Failure"# To check if Caffe2 GPU build was successful# This must print a number &gt; 0 in order to use Detectronpython -c 'from caffe2.python import workspace; print(workspace.NumCudaDevices())' Ê†πÊçÆÊâßË°åÁªìÊûúÂà§Êñ≠ÂÆâË£ÖÊòØÂê¶ÊàêÂäü ‰ªéÊ∫êÁ†ÅÁºñËØëÈúÄÊ≥®ÊÑèÔºö If the caffe2 Python package is not found, you likely need to adjust your PYTHONPATH environment variable to include its location (/path/to/caffe2/build, where build is the Caffe2 CMake build directory). COCO API ‰æùËµñÔºö setuptools&gt;=18.0 cython&gt;=0.27.3 matplotlib&gt;=2.1.0 123456conda install setuptools cython matplotlibCOCOAPI=/path/to/clone/cocoapi # ÊåáÂÆöÂÆâË£ÖË∑ØÂæÑgit clone https://github.com/cocodataset/cocoapi.git $COCOAPIcd $COCOAPI/PythonAPImake#python setup.py install --user Detectron ‰∏ãËΩΩ‰ª£Á†Å‰ªìÂ∫ìÔºö 12DETECTRON=/path/to/clone/detectron # ÊåáÂÆöÂÆâË£ÖË∑ØÂæÑgit clone https://github.com/facebookresearch/detectron $DETECTRON ÂÆâË£Ö Python ‰æùËµñÔºö 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple -r $DETECTRON/requirements.txt ÁÑ∂Âêé make: 1cd $DETECTRON &amp;&amp; make ÂÆâË£ÖÂÆåÊàêÂêéËøêË°åÊµãËØïÔºö 1python $DETECTRON/detectron/tests/test_spatial_narrow_as_op.py ÁªìÊûúËæìÂá∫ OKÔºåÂÆâË£ÖÂÆåÊØï ËæìÂá∫‰ª•‰∏ãÊèêÁ§∫‰ø°ÊÅØ‰∏çÂøÖÁêÜ‰ºöÔºö 12No handlers could be found for logger "caffe2.python.net_drawer"net_drawer will not run correctly. Please install the correct dependencies. Troubleshooting ÂèÇÁÖß Detectron Troubleshooting Reference https://github.com/facebookresearch/Detectron/blob/master/INSTALL.md https://caffe2.ai/docs/getting-started.html?platform=ubuntu&amp;configuration=prebuilt https://blog.csdn.net/weixin_43624538/article/details/84712617 P.S. CUDA8.0 cuDNN5.1.10 ÂÆâË£ÖÂ§±Ë¥•ÔºåÂéüÂõ†ÔºöPyTorch ÈúÄË¶Å cuDNN&gt;=7.0 Êü•Áúã CUDA Âíå cuDNN ÁâàÊú¨Ôºö 12345# CUDAcat /usr/local/cuda/version.txt# cuDNNcat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2]]></content>
      <categories>
        <category>ÂÆâË£Ö</category>
      </categories>
      <tags>
        <tag>detectron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[YOLOv3 ÂÆâË£ÖÊ≠•È™§]]></title>
    <url>%2F2019%2F01%2F15%2FYOLOv3-installation%2F</url>
    <content type="text"><![CDATA[Êìç‰ΩúÁ≥ªÁªüÔºöLinux 16.04 ‰æùËµñÔºö CUDA OpenCV darknet ÂÜôÂú®ÂâçÈù¢Ôºöconda ÊòØ‰∏ÄÊ¨æÈùûÂ∏∏Â•ΩÁî®ÁöÑ python ÁéØÂ¢ÉÁÆ°ÁêÜÂ∑•ÂÖ∑ÔºåÂª∫ËÆÆÂÆâË£Ö Anaconda Êàñ Miniconda„ÄÇÂÆâË£ÖÂèä‰ΩøÁî®ËØ∑ÂèÇÈòÖÁΩë‰∏äÊïôÁ®ãÔºåÂÆâË£ÖÂÆåÊàêÂêéËÆ∞ÂæóÊ∑ªÂä†Ê∏ÖÂçéÂ§ßÂ≠¶ tuna ÈïúÂÉè„ÄÇ Anaconda ÈïúÂÉè‰ΩøÁî®Â∏ÆÂä© CUDA ÊåâÁÖßÁΩë‰∏äÊïôÁ®ãÊàñËã±‰ºüËææÂÆòÊñπÁΩëÁ´ôÊ≠£Á°ÆÂÆâË£Ö CUDA Âíå cuDNNÔºàÂÆûÈ™åÂÆ§ÊúçÂä°Âô®‰∏äÁöÑÁâàÊú¨ÊòØ cuda9.0 cudnn7.1Ôºâ OpenCv Â¶ÇÊûúÂÆâË£Ö‰∫Ü condaÔºåÈ¶ñÂÖàËøõÂÖ•‰Ω†ÊÉ≥Ë¶ÅÂÆâË£Ö YOLO ÁöÑËôöÊãüÁéØÂ¢É„ÄÇÁ¨¨‰∏ÄÊ¨°‰ΩøÁî® Anaconda ËØ∑ÂÖàÂàõÂª∫ËôöÊãüÁéØÂ¢É„ÄÇ 1conda create --name YOURNAME python=3.6 numpy pandas matplotlib ÔºàYOURNAME ÊõøÊç¢‰∏∫‰Ω†ÊÉ≥Ë¶ÅÁöÑÂêçÂ≠óÔºâ‰∏äËø∞ÂëΩ‰ª§Â∞ÜÂàõÂª∫Êñ∞ÁöÑ python ËôöÊãüÁéØÂ¢ÉÔºåÂπ∂ÂÆâË£ÖÂ∏∏Áî®Â∑•ÂÖ∑ÂåÖ numpy, pandas, matplotlibÔºåÂàõÂª∫ÂÆåÊàêÂêéËøõÂÖ•ËôöÊãüÁéØÂ¢É 12source activate YOURNAMEsource deactivate # use this one to exit ËøõÂÖ•ÁéØÂ¢ÉÂêéÂºÄÂßãÂÆâË£Ö OpenCV 1conda install opencv ÂÆâË£ÖÂÆåÊØïÂç≥ÂèØ darknet È¶ñÂÖà‰∏ãËΩΩ github ‰ªìÂ∫ì 12git clone https://github.com/AlexeyAB/darknet.gitcd darknet ÁÑ∂ÂêéÊâìÂºÄ Makefile Êñá‰ª∂Ôºå‰øÆÊîπ‰ª•‰∏ãÈÄâÈ°πÔºö 123GPU = 1CUDNN = 1OPENCV = 1 ÁÑ∂ÂêéÂú® darknet ÁõÆÂΩï‰∏ãÊâßË°å 1make Â¶ÇÊûúÊ≤°ÊúâÊä•ÈîôÔºåYOLOv3 Â∞±ÂÆâË£ÖÊàêÂäü‰∫Ü„ÄÇÊµãËØï‰∏Ä‰∏ã 1./darknet ÂèØ‰ª•ÁúãÂà∞ËæìÂá∫‰∏∫Ôºö 1usage: ./darknet &lt;function&gt; Reference https://github.com/AlexeyAB/darknet https://pjreddie.com/darknet/yolo/ ü¶Ñ]]></content>
      <categories>
        <category>ÂÆâË£Ö</category>
      </categories>
      <tags>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PANet ÂÆâË£ÖÊ≠•È™§]]></title>
    <url>%2F2019%2F01%2F15%2FPANet-installation%2F</url>
    <content type="text"><![CDATA[Requirements Êìç‰ΩúÁ≥ªÁªüÔºöLinux 16.04 Âπ≥Âè∞ÔºöPyTorch ‰æùËµñ pytorch = 0.4.0 torchvision &gt;= 0.2.0 cython matplotlib numpy scipy opencv pyyaml packaging pycocotools ‚Äì for coco dataset tensorboardX ‚Äì for logging in TensorBoard PyTorch ‰ΩøÁî® conda ÂÆâË£Ö PyTorch ÊØîËæÉÁÆÄÂçïÔºåÈ¶ñÂÖàËøõÂÖ• conda ÁéØÂ¢ÉÔºåÁÑ∂ÂêéÊâßË°å 1conda install pytorch=0.4.0 torchvision cuda90 -c pytorch ÂÖ∂‰Ωô cython Á≠âÂåÖÈÉΩÂèØ‰ª•‰ΩøÁî® conda install ÊàñËÄÖ pip install ÂëΩ‰ª§Êù•ÂÆâË£ÖÔºåÂ∞±‰∏çÂÜçÈáçÂ§ç‰∫Ü ÁºñËØë PANet È¶ñÂÖà‰∏ãËΩΩ github ‰ªìÂ∫ìÔºö 12git clone https://github.com/ShuLiu1993/PANet.gitcd PANet ÁÑ∂ÂêéÁºñËØë 12cd lib # please change to this directorysh make.sh Á≠âÂæÖÁºñËØëÂÆåÊàêÂç≥ÂèØ„ÄÇËÆ≠ÁªÉ‰ª£Á†ÅÂú® PANet/tools Êñá‰ª∂Â§π‰∏ã„ÄÇ Â¶ÇÊûúÂÆâË£ÖËøáÁ®ãÊä•ÈîôÊâæ‰∏çÂà∞ cuda_runtime.hÔºåÂèØ‰ª•Êü•ÁúãËøôÈáå Reference https://github.com/ShuLiu1993/PANet https://github.com/roytseng-tw/Detectron.pytorch]]></content>
      <categories>
        <category>ÂÆâË£Ö</category>
      </categories>
      <tags>
        <tag>panet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Êü•ÊâæÂõûÊñáÂ≠óÁ¨¶‰∏≤ÔºöÈ©¨ÊãâËΩ¶ÁÆóÊ≥ï Manacher's Algorithm]]></title>
    <url>%2F2018%2F12%2F20%2FManacher-Algorithm%2F</url>
    <content type="text"><![CDATA[Âú® LeetCode ÁúãÂà∞‰∏Ä‰∏™È¢òÔºåÁªôÂÆö‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÔºåËøîÂõûÊúÄÂ§ßÈïøÂ∫¶ÁöÑÂõûÊñáÂ≠êÂ≠óÁ¨¶‰∏≤„ÄÇ Example: 12Input: "babad"Output: "bab" or "aba" ÊúÄÁÆÄÂçïÁöÑÊñπÊ≥ïÂ∞±ÊòØÊö¥ÂäõÂæ™ÁéØÈÅçÂéÜÔºå‰ΩÜÊòØÁÆóÊ≥ïÂ§çÊùÇÂ∫¶‰∏∫ $O(n^3)$, Âõ†Ê≠§ËÆ∞ÂΩï‰∏Ä‰∏™Á∫øÊÄßÂ§çÊùÇÂ∫¶ÁöÑÁÆóÊ≥ï‚Äî‚ÄîÈ©¨ÊãâËΩ¶ÁÆóÊ≥ï„ÄÇ LeetCodeÔºöhttps://leetcode.com/problems/longest-palindromic-substring Ëã±ÊñáËß£ÈáäÔºöhttps://articles.leetcode.com/longest-palindromic-substring-part-ii ‰∏≠ÊñáËß£ÈáäÔºöhttps://www.felix021.com/blog/read.php?2040 Manacher‚Äôs Algorithm È¶ñÂÖàÔºåÂÅáËÆæËæìÂÖ•Â≠óÁ¨¶‰∏≤‰∏∫ abaabaÔºåÊòæÁÑ∂ËæìÂÖ•Âç≥‰∏∫ÊúÄÈïøÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤ÔºåÂõ†Ê≠§ËæìÂá∫Â∫î‰∏∫ abaaba„ÄÇËÆ©Êàë‰ª¨ÂàÜ‰∏§Ê≠•Êù•Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò„ÄÇ 1. È¢ÑÂ§ÑÁêÜ Êàë‰ª¨ÊÉ≥‰∏Ä‰∏ãÂèØËÉΩ‰ºöÂèëÁé∞ÔºåÂõûÊñáÂ≠óÁ¨¶‰∏≤ÂàÜ‰∏∫‰∏§ÁßçÊÉÖÂÜµÔºöÂ•áÊï∞ÈïøÂ∫¶ÂíåÂÅ∂Êï∞ÈïøÂ∫¶„ÄÇËøô‰∏§ÁßçÊÉÖÂÜµÊòæÁÑ∂ÊòØÊó†Ê≥ïÁõ¥Êé•ÂêàÂπ∂Â§ÑÁêÜÁöÑÔºåÂõ†Ê≠§È©¨ÊãâËΩ¶ÁÆóÊ≥ïÈ¶ñÂÖàÂØπËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤ËøõË°å‰∫Ü‰∏Ä‰∏ãÂ§ÑÁêÜÔºöÂú®ÊØè‰∏™Â≠óÁ¨¶ÁöÑ‰∏§‰æßÊèíÂÖ•‰∏Ä‰∏™ÁâπÂÆöÂ≠óÁ¨¶ #Ôºå‰æãÂ¶ÇÔºö 12S = &apos;abaaba&apos;T = &apos;#a#b#a#a#b#a#&apos; ËøôÊ†∑ÂÅöÁöÑÂ•ΩÂ§ÑÊòØÊâÄÊúâÁöÑÂ≠óÁ¨¶‰∏≤ÈÉΩÂèòÊàê‰∫ÜÂ•áÊï∞ÈïøÂ∫¶ÔºåËøôÊ†∑Êàë‰ª¨Â∞±‰∏çÈúÄË¶ÅÂàÜÂà´ËÄÉËôë‰∫Ü È¢ÑÂ§ÑÁêÜÈÉ®ÂàÜÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö 123456def preProcess(self, s): l = [c for c in s] ret = '#'.join(l) # add ^ and $ at both bounds to avoid out of index problem return '^#'+ret+'#$' 2. ÁÆóÊ≥ïÈÉ®ÂàÜ ÁÆóÊ≥ïÁöÑÊÄùÊÉ≥ÊòØËøôÊ†∑ÁöÑÔºåÂØπ‰∫é‰∏Ä‰∏™È¢ÑÂ§ÑÁêÜ‰πãÂêéÁöÑÂ≠óÁ¨¶‰∏≤ TÔºåÂÆö‰πâ‰∏Ä‰∏™ÂÖ∑ÊúâÁõ∏ÂêåÈïøÂ∫¶ÁöÑÊï∞ÁªÑ PÔºå‰ΩøÂæó P[i] Á≠â‰∫é‰ª• T[i] ‰∏∫‰∏≠ÂøÉÁöÑ T ‰∏≠ÊúÄÈïøÂõûÊñáÂ≠óÁ¨¶‰∏≤ÁöÑÂçäÂæÑÔºåÂØπ‰∫é‰∏äÈù¢ÁöÑ‰æãÂ≠ê 12T = # a # b # a # a # b # a #P = 0 1 0 3 0 1 6 1 0 3 0 1 0 Êàë‰ª¨ÂèØ‰ª•ÂèëÁé∞ÔºåP ÂÖ∑ÊúâÊüêÁßçÂØπÁß∞ÊÄßË¥®ÔºåÊàë‰ª¨ÂèØ‰ª•Âà©Áî®Ëøô‰∏™ÊÄßË¥®Âú®‰∏ÄÂÆöÁ®ãÂ∫¶‰∏äÂáèÂ∞èÊàë‰ª¨ÁöÑËÆ°ÁÆóÂ§çÊùÇÂ∫¶„ÄÇÈÇ£‰πàÊâÄÊúâÁöÑÊÉÖÂÜµÈÉΩÊòØÂØπÁß∞ÁöÑÂêóÔºüÂèØÊÉúÁöÑÊòØÂπ∂‰∏çÊòØÔºåÂè™ÊúâÂú®ÊüêÁßçÁâπÂÆöÁöÑÊù°‰ª∂‰∏ãËøôÁßçÊÉÖÂÜµÊâçÊàêÁ´ã„ÄÇ‰ΩÜÊòØÊ≤°ÂÖ≥Á≥ªÔºåÊàë‰ª¨‰∏ÄÊ†∑ÂèØ‰ª•Âà©Áî®Ëøô‰∏™ÊÄßË¥®ÂáèÂ∞ëËÆ°ÁÆóÔºåÂè™ÊòØÈúÄË¶ÅÊâæÂà∞‰∏çÊª°Ë∂≥ËøôÁßçÊÉÖÂÜµÁöÑÊù°‰ª∂Â∞±ÂèØ‰ª•‰∫Ü Êàë‰ª¨Êù•Áúã‰∏Ä‰∏™Á®çÂæÆÂ§çÊùÇ‰∏ÄÁÇπÁöÑ‰æãÂ≠êÔºåS = ‚Äòbabcbabcbaccba‚Äô ‰∏äÂõæ‰∏≠ÂÅáËÆæÂΩìÂâç i ‰∏∫ 13Ôºå ÂÆûÁ∫øË°®Á§∫ÂõûÊñáÂ≠óÁ¨¶‰∏≤ abcbabcbaÁöÑ‰∏≠ÂøÉÔºåËôöÁ∫øË°®Á§∫‰∏§‰æßÁöÑËæπÁïå„ÄÇÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞ÔºåÁî±‰∫éÂõûÊñáÂ≠óÁ¨¶‰∏≤ÁöÑÂØπÁß∞ÊÄßË¥®ÔºåÊàë‰ª¨ÂèØ‰ª•Âø´ÈÄüÁöÑÁü•ÈÅì P[13] ÁöÑÂÄºÔºå‰πüÂ∞±ÊòØÁ≠â‰∫é P[9] Â§ÑÁöÑÂÄº„ÄÇÁÑ∂ÂêéÁªßÁª≠Áúã Áé∞Âú®Êàë‰ª¨Âà∞‰∫Ü‰∏ãÊ†á‰∏∫ 15 ÁöÑ‰ΩçÁΩÆÔºåp[15] ÁöÑÂÄºÊòØÂ§öÂ∞ëÂë¢ÔºüÂ¶ÇÊûúÊàë‰ª¨ÁªßÁª≠Ê†πÊçÆÂØπÁß∞ÊÄßË¥®ÔºåÈÇ£‰πàÂ∞±‰ºöÂæóÂà∞ P[15] = P[7] = 7Ôºå‰ΩÜÂæàÊòæÁÑ∂ÊòØÈîôËØØÁöÑ„ÄÇ Â¶ÇÊûú‰ª• T[15] ‰∏∫‰∏≠ÂøÉÔºåÊàë‰ª¨ÂæóÂà∞ÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤‰∏∫ #a#b#c#b#a#ÔºåËÄå T[7] Â§ÑÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤Ë¶ÅÊõ¥ÈïøÔºåËøôÊòØÂõ†‰∏∫Êàë‰ª¨ÂΩìÂâçÁöÑ‰ª• C ‰∏∫‰∏≠ÂøÉÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤Âπ∂‰∏çËÉΩÂÆåÂÖ®ÂåÖÂê´‰ª• T[7] ‰∏∫‰∏≠ÂøÉÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤ÔºåÂõ†Ê≠§Â∞±ÈÄ†Êàê‰∫Ü‰∏çÊª°Ë∂≥ÂØπÁß∞ÊÄßË¥®ÁöÑÊÉÖÂÜµ„ÄÇËß£ÂÜ≥ÂäûÊ≥ï‰πüÂæàÁÆÄÂçïÔºåÂè™Ë¶ÅÂèñ P[i] = min(P[i'], R-i) Â∞±ÂèØ‰ª•‰∫Ü„ÄÇ Áî®‰º™‰ª£Á†ÅÊÄªÁªì‰∏Ä‰∏ãÔºö 123if P[i&apos;] &lt;= R - ithen P[i] = P[i&apos;]else P[i] &lt;= P[i&apos;] ÁÑ∂ÂêéÊàë‰ª¨ÈúÄË¶ÅÁ°ÆÂÆö R Âíå C ÁöÑÊõ¥Êñ∞Á≠ñÁï•ÔºöÂ¶ÇÊûú‰ª• i ‰∏∫‰∏≠ÂøÉÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤ÁöÑË∂ÖËøá‰∫Ü RÔºåÂàô‰ª§Êñ∞ÁöÑ‰∏≠ÂøÉC = iÔºåÁÑ∂ÂêéÊää R Êâ©Â±ïÂà∞Êñ∞ÁöÑÂõûÊñáÂ≠óÁ¨¶‰∏≤ÁöÑÂè≥ËæπÁïå„ÄÇ ÂÖ®ÈÉ®‰ª£Á†ÅÂ¶Ç‰∏ã 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution: def longestPalindrome(self, s): """ :type s: str :rtype: str """ # Manacher's algorithm T = self.preProcess(s) length = len(T) C, R = 0, 0 P = [0] * length i = 1 while i &lt; length-1: # i_mirror can reduce the computation of P[i] i_mirror = 2*C - i # equals to C - (i - C) P[i] = min(P[i_mirror], R-i) if R &gt; i else 0 # expand the palindrome centered at i while T[i + P[i] + 1] == T[i - P[i] - 1]: P[i] += 1 # adjust center if the expanded palindrome pasts R if R &lt; i + P[i]: C = i R = i + P[i] i += 1 maxLength = max(P) centerIndex = P.index(maxLength) start = (centerIndex - maxLength) // 2 stop = start + maxLength return s[start:stop] def preProcess(self, s): l = [c for c in s] ret = '#'.join(l) # add ^ and $ at both bounds to avoid out of index problem return '^#'+ret+'#$' ÊúÄÂêé ÊåâÁêÜËØ¥Á∫øÊÄßÂ§çÊùÇÂ∫¶ÁöÑÁÆóÊ≥ïÂ∑≤ÁªèÊòØÂæàÂø´‰∫ÜÔºåÂΩìÁÑ∂ LeetCode ‰∏äËøòÊúâÂæàÂ§öÂ§ßÁ•ûÁöÑÁ•û‰ªô‰ª£Á†ÅÊõ¥Âø´ÔºåÂèçÊ≠£ÊàëÊòØÁúã‰∏çÊáÇ‚Ä¶‚Ä¶ üôÇ ÂÆå]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>ÁÆóÊ≥ï</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch Ë∞ÉÁî® GPU Êä• CUDA unknown error]]></title>
    <url>%2F2018%2F12%2F18%2Fpytorch-cuda-unknown-error%2F</url>
    <content type="text"><![CDATA[ÊúÄËøë‰∏∫‰∫ÜË∑ë PANetÔºåÂú®ÊúçÂä°Âô®‰∏äÂÆâË£Ö‰∫Ü Detectron.pytorchÔºåÂÆâË£ÖËøáÁ®ãËøòÊå∫È°∫Âà©Ôºå‰ΩÜÊòØÂè™Ë¶ÅË∞ÉÁî® GPU ËøêÁÆóÂ∞±Êä•Êú™Áü•ÈîôËØØÔºåÁΩë‰∏äÊêúÁ¥¢‰∏ÄÁï™ÂèëÁé∞ÂèØËÉΩÊòØÊòæÂç°È©±Âä®ÂÆâË£ÖÊúâÈóÆÈ¢òÔºåÂØºËá¥ Torch Ë∞ÉÁî®ÊòæÂç°Êó∂Êó†Ê≥ïÊ≠£Â∏∏ÂàùÂßãÂåñ„ÄÇËøôÈáåËÆ∞ÂΩï‰∏Ä‰∏ãÁΩë‰∏äÁöÑËß£ÂÜ≥ÊñπÊ≥ï„ÄÇ Êä•Èîô‰ø°ÊÅØ 1RuntimeError: cuda runtime error (30) : unknown error at /opt/conda/conda-bld/pytorch_1524586445097/work/aten/src/THC/THCTensorRandom.cu:25 ÊñπÊ≥ï1ÔºöÈáçÊñ∞ÂÆâË£ÖÊòæÂç°È©±Âä®Âíå CUDA Êó¢ÁÑ∂ÊòØÈ©±Âä®ÈóÆÈ¢òÔºåÈÇ£‰πàËá™ÁÑ∂Âú∞ÈáçÊñ∞ÂÆâË£Ö‰∏Ä‰∏ãÊúÄÊñ∞ÁâàÁöÑÊòæÂç°È©±Âä®Â∫îËØ•Â∞±Ê≤°ÈóÆÈ¢ò‰∫ÜÔºåÊ≥®ÊÑèÈ©±Âä®ÂÆâË£ÖÂÆåÊàê‰πãÂêéÊúÄÂ•ΩË¶ÅÈáçÂêØ‰∏Ä‰∏ãÊú∫Âô®„ÄÇÂÆâË£ÖÂÆåÈ©±Âä®‰πãÂêé‰ΩøÁî® conda ÈáçÊñ∞ÂÆâË£Ö PyTorch„ÄÇ‰ΩÜÊòØÁî±‰∫éÊúçÂä°Âô®ÊòØÂÖ¨Áî®ËµÑÊ∫êÔºå‰∏∫‰∫Ü‰∏çÂΩ±ÂìçÂêåÂ≠¶‰ΩøÁî®ÔºåÂè™Âæó‰ΩøÁî®ÊùÉÂÆú‰πãËÆ°„ÄÇ ÊñπÊ≥ï2Ôºöroot ÊùÉÈôêËøêË°å python ÁΩë‰∏äÁöÑËß£ÂÜ≥ÊñπÊ≥ïÈô§‰∫ÜÈáçË£ÖÈ©±Âä®‰πãÂ§ñÔºåËøòÊúâ‰∏ÄÁßçÊöÇÊó∂ÁöÑËß£ÂÜ≥ÂäûÊ≥ï„ÄÇÂõ†‰∏∫Ê≠£Á°ÆÂÆâË£ÖÊòæÂç°È©±Âä®‰ºö‰øùËØÅ Torch Ë∞ÉÁî®ÊòæÂç°Êó∂Ëá™Âä®ËøõË°åÊ≠£Â∏∏ÁöÑÂàùÂßãÂåñÔºåÈÇ£Êàë‰πüÂèØ‰ª•ÊâãÂä®Ëµã‰∫à python root ÊùÉÈôêÂéªÂàùÂßãÂåñÊòæÂç°„ÄÇ Âú®Â∞ùËØïÁöÑËøáÁ®ã‰∏≠ÂèëÁé∞ÔºåÁî±‰∫éÊúçÂä°Âô®ÁéØÂ¢ÉÊØîËæÉÊ∑∑‰π±Ôºåsudo ÊèêÂçáÊùÉÈôê‰πãÂêéËøêË°åÁöÑ‰∏çÊòØÊàëËá™Â∑±ÁöÑ pythonÔºåËÄå‰∏î PYTHONPATH Âíå ‰∏Ä‰∫õÁéØÂ¢ÉÂèòÈáè‰πü‰∏çÂØπ„ÄÇËß£ÂÜ≥ÊñπÊ≥ïÂ¶Ç‰∏ãÔºö È¶ñÂÖàÂú® python ‰ª£Á†Å‰∏≠Âä†‰∏ä 12345import osimport syssys.path.append('/path/to/cocoapi/PythonAPI') # my code needs pycocotoolsos.environ["CUDA_DEVICE_ORDER"]="PCI_BUS_ID" # optionalos.environ["CUDA_VISIBLE_DEVICES"]="0" ÁÑ∂ÂêéÂú®ËøêË°å 1sudo /path/to/your/python tools/train_net_step.py --dataset dota --cfg xx.yml --use_tfboard ÁÑ∂ÂêéÂ∞±ÂèØ‰ª•ÂºÄÂßãËÆ≠ÁªÉ‰∫Ü ÂÆå]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
        <tag>cuda</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ÁºñËØëÊó∂ÈÅáÂà∞ /tmp Êñá‰ª∂Â§πÁ©∫Èó¥‰∏çË∂≥ÁöÑËß£ÂÜ≥ÂäûÊ≥ï]]></title>
    <url>%2F2018%2F12%2F11%2FNo-Space-in-tmp%2F</url>
    <content type="text"><![CDATA[‰ªäÂ§©Âú®ÊúçÂä°Âô®‰∏äÁºñËØë PyTorch Êó∂ÈÅáÂà∞‰∫Ü /tmp Êñá‰ª∂Â§πÁ©∫Èó¥‰∏çË∂≥ÁöÑÈóÆÈ¢òÔºå‰∏ÄËà¨Êù•ËØ¥ÂÆâË£Ö Ubuntu Êó∂Áªô / ÊåÇËΩΩÁÇπÂàÜÈÖçË∂≥Â§üÁöÑÁ°¨ÁõòÁ©∫Èó¥Â∞±‰∏ç‰ºöÈÅáÂà∞Ëøô‰∏™ÈóÆÈ¢òÔºå‰ΩÜÊòØÊúçÂä°Âô®ÊúâÂæàÂ§ö‰∫∫Áî®ÔºåÊñá‰ª∂ÊØîËæÉÊ∑∑‰π±Ôºå/ÊåÇËΩΩÁÇπÂ∑≤ÁªèËææÂà∞‰∫Ü 100% ÁöÑÁ©∫Èó¥‰ΩøÁî®ÁéáÔºåÂõ†Ê≠§ÁôæÂ∫¶Âà∞‰∫Ü‰∏Ä‰∏™Ëß£ÂÜ≥ÂäûÊ≥ï ÂÖ∂ÂÆûËß£ÂÜ≥ÊñπÊ≥ïÂæàÁÆÄÂçïÔºåÂè™ÈúÄË¶ÅÂú®ÊúâÁ°¨ÁõòÁ©∫Èó¥ÁöÑÊåÇËΩΩÁÇπ‰∏ãÔºà‰æãÂ¶Ç /home ÔºâÊñ∞Âª∫‰∏Ä‰∏™‰∏¥Êó∂Êñá‰ª∂Â§π‰æõÁºñËØëÊó∂‰∏¥Êó∂‰ΩøÁî®Â∞±ÂèØ‰ª•‰∫Ü Êñ∞Âª∫Êñá‰ª∂Â§π Âú®Áî®Êà∑ÁõÆÂΩï‰∏ãÊñ∞Âª∫‰∏¥Êó∂Êñá‰ª∂Â§πÔºåÂπ∂‰Ωø‰πãÁîüÊïàÂç≥ÂèØ 123cd /home/lxymkdir tmpexport TMPDIR = /home/lxy/tmp ËøôÊ†∑ÈáçÊñ∞ÊâßË°åÁºñËØëÂëΩ‰ª§Â∞±ÂèØ‰ª•È°∫Âà©ÁºñËØë‰∫Ü ËøòÂèØ‰ª•Â∞ÜÊúÄÂêé‰∏ÄÂè•‰ª£Á†ÅÂÜôËøõ .bashrc Êñá‰ª∂ÔºåÁÑ∂Âêé source ‰∏Ä‰∏ãÔºå‰ª•Âêé‰∏¥Êó∂Êñá‰ª∂ÈÉΩ‰ºöÂ≠òÊîæÂú®ËØ•‰∏¥Êó∂Êñá‰ª∂Â§π ÂÆå]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Â∞Ü DOTA Êï∞ÊçÆÈõÜÁöÑÊ†áÊ≥®ËΩ¨Êç¢‰∏∫ COCO Ê†ºÂºè]]></title>
    <url>%2F2018%2F12%2F10%2FConvert-dataset-to-coco-like%2F</url>
    <content type="text"><![CDATA[DOTA Êï∞ÊçÆÈõÜÔºöhttp://captain.whu.edu.cn/DOTAweb/index.html COCO Êï∞ÊçÆÈõÜÔºöhttp://cocodataset.org/#download COCO APIÔºöhttps://github.com/cocodataset/cocoapi API make Êä•ÈîôÔºåÂÆâË£Ö Cython Âç≥ÂèØ 1conda install cython COCO Êï∞ÊçÆÈõÜÁÆÄ‰ªã COCO Êï∞ÊçÆÈõÜÂåÖÂê´ instanceÔºåkeypoint Âíå caption Á≠âÈÉ®ÂàÜÔºåÊú¨ÊñáÂè™‰ªãÁªç instance Áõ∏ÂÖ≥ÂÜÖÂÆπ COCO Êï∞ÊçÆÈõÜÁöÑÁªÑÁªáÊñπÂºè coco ‚îú‚îÄ‚îÄ annos.txt (optional) ‚îú‚îÄ‚îÄ annotations ‚îú‚îÄ‚îÄ classes.txt (optional) ‚îî‚îÄ‚îÄ images annotations Êñá‰ª∂Â§πÊîæÊï∞ÊçÆÈõÜÁöÑÊ†áÊ≥®Êñá‰ª∂ÔºàjsonÊ†ºÂºèÔºâÔºåimages Êñá‰ª∂Â§πÊîæÊï∞ÊçÆÈõÜÁöÑÊâÄÊúâÂõæÁâáÔºåÔºàannos.txt ÊîæÊï∞ÊçÆÈõÜÁöÑÂéüÂßãÊ†áÊ≥®Êñá‰ª∂Ôºåclass.txt ÊîæÊ†áÊ≥®ÁöÑÁ±ªÂà´ÂêçÁß∞ÔºåÊØèË°å‰∏Ä‰∏™Á±ªÂà´Ôºå‰∏çÂê´ËÉåÊôØÔºâ COCO ÁöÑÊï∞ÊçÆÊ†áÊ≥®Ê†ºÂºè COCO Êï∞ÊçÆÈõÜ‰ª• json Êñá‰ª∂Ê†ºÂºèÂ≠òÂÇ®Êï∞ÊçÆÈõÜÁöÑÊ†áÊ≥®‰ø°ÊÅØÔºåÊ†áÊ≥®ÁöÑÊ†ºÂºèÂèØ‰ª•ÂèÇËÄÉ ÂÆòÁΩë ÂíåËøô‰∏™ Áü•‰πé‰∏ìÊ†èÔºåÂú®ËøôÈáåÂ∞±‰∏çÈáçÂ§ç‰∫Ü„ÄÇ Á°ÆÂÆö‰∫ÜÊ†áÊ≥®ÁöÑÊ†ºÂºè‰ª•ÂêéÔºåÂàÜÊûê DOTA Êï∞ÊçÆÈõÜÁöÑÊ†áÊ≥®Ê†ºÂºèÔºåÂèØ‰ª•ÊèêÂèñÂÖ∂‰∏≠ÁöÑ‰ø°ÊÅØÁÑ∂Âêé‰ª• json Ê†ºÂºèÂ≠òÂÇ®‰∏ãÊù•Â∞±ÂèØ‰ª•‰∫Ü Ê†ºÂºèËΩ¨Êç¢ËÑöÊú¨ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556import jsonimport dota_utils as utilimport osfrom PIL import Imageinfo = &#123;"description": "DOTA dataset from WHU", "url": "http://caption.whu.edu.cn", "year": 2018, "version": "1.0"&#125;licenses = &#123;"url": "http://creativecommons.org/licenses/by-nc/2.0/", "id": 1, "name": "Attribution-NonCommercial License"&#125;categories = []for i, catName in enumerate(util.wordname_15, start=1): categories.append(&#123;"id": i, "name": "%s" % catName, "supercategory": "%s" % catName&#125;)images = []annotations = []aug = "/home/lxy/dota/data/aug"augmented = "/home/lxy/dota/data/augmented"train_small = "/home/lxy/dota/data/train_small"trainsplit_HBB = "/home/lxy/dota/data/trainsplit_HBB"val_small = "/home/lxy/dota/data/val_small"valsplit_HBB = "/home/lxy/dota/data/valsplit_HBB"dataset_path = [augmented, train_small, trainsplit_HBB, val_small, valsplit_HBB]imgid = 0annid = 0for path in dataset_path: img_path = os.path.join(path, "images") label_path = os.path.join(path, "labelTxt") for file in os.listdir(label_path): img_name = file.replace("txt", "png") im = Image.open(os.path.join(img_path, img_name)) w, h = im.size imgid += 1 images.append(&#123;"license": 1, "file_name": "%s" % img_name, \ "height": h, "width": w, "id": imgid&#125;) f = open(os.path.join(label_path, file)) for line in f.readlines(): line = "".join(line).strip("\n").split(" ") # a bbox has 4 points, a category name and a difficulty if len(line) != 10: print(path, file) else: annid += 1 catid = util.wordname_15.index(line[-2]) + 1 w_bbox = int(line[4][:-2]) - int(line[0][:-2]) h_bbox = int(line[5][:-2]) - int(line[1][:-2]) bbox = [line[0], line[1], str(w_bbox)+'.0', str(h_bbox)+'.0'] annotations.append(&#123;"id": annid, "image_id": imgid, "category_id": catid, \ "segmentation": [line[0:8]], "area": float(w_bbox*h_bbox), \ "bbox": bbox, "iscrowd": 0&#125;) f.close()my_json = &#123;"info": info, "licenses": licenses, "images": images, "annotations": annotations, "categories": categories&#125;with open("/home/lxy/dota/data/coco/annotations/train.json", "w+") as f: json.dump(my_json, f) print("writing json file done!") Ê£ÄÊü•ËΩ¨Êç¢ÁªìÊûú ËøôÈáåÈúÄË¶ÅÁî®Âà∞ COCO APIÔºåÂÖ∑‰ΩìÁî®Ê≥ïÂèÇËÄÉ repo ÈáåÁöÑ demo Êñá‰ª∂ÔºåËØªÂèñËΩ¨Êç¢ÂÆåÊàêÁöÑÊï∞ÊçÆÈõÜÂπ∂ÊòæÁ§∫Ê†áÊ≥®ÁªìÊûúÔºåËßÇÂØüÊ†áÊ≥®ÊòØÂê¶ÊúâËØØ ÂÆå]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>Êï∞ÊçÆÈõÜ</tag>
        <tag>COCO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NP-HardÈóÆÈ¢ò]]></title>
    <url>%2F2018%2F12%2F07%2FNP-Hard%2F</url>
    <content type="text"><![CDATA[ÁÆÄÂçïÁêÜËß£ NP, P, NP-Complete Âíå NP-Hard ÂèÇËÄÉÔºöhttps://www.cnblogs.com/sancyun/p/4250360.html P ÊòØ‰∏ÄÁ±ªÂèØ‰ª•ÈÄöËøáÁ°ÆÂÆöÊÄßÂõæÁÅµÊú∫Ôºà‰ª•‰∏ãÁÆÄÁß∞ ÂõæÁÅµÊú∫ÔºâÂú®Â§öÈ°πÂºèÊó∂Èó¥ (Polynomial time) ÂÜÖËß£ÂÜ≥ÁöÑÈóÆÈ¢òÈõÜÂêà„ÄÇ NP ÊòØ‰∏ÄÁ±ªÂèØ‰ª•ÈÄöËøáÈùûÁ°ÆÂÆöÊÄßÂõæÁÅµÊú∫ ( Non-deterministic Turing Machine) Âú®Â§öÈ°πÂºèÊó∂Èó¥ (Polynomial time) ÂÜÖËß£ÂÜ≥ÁöÑÂÜ≥Á≠ñÈóÆÈ¢òÈõÜÂêà„ÄÇ P ÊòØ NP ÁöÑÂ≠êÈõÜÔºå‰πüÂ∞±ÊòØËØ¥‰ªª‰ΩïÂèØ‰ª•Ë¢´ÂõæÁÅµÊú∫Âú®Â§öÈ°πÂºèÊó∂Èó¥ÂÜÖËß£ÂÜ≥ÁöÑÈóÆÈ¢òÈÉΩÂèØ‰ª•Ë¢´ÈùûÁ°ÆÂÆöÊÄßÁöÑÂõæÁÅµÊú∫Ëß£ÂÜ≥„ÄÇ Êé•‰∏ãÊù•ËØ¥ËØ¥ NP ÈáåÊúÄÈöæÂæóÈóÆÈ¢ò NP-Complete„ÄÇ ÂÖ∂ÂÆö‰πâÂ¶Ç‰∏ãÔºå Â¶ÇÊûú‰∏Ä‰∏™ÂÜ≥Á≠ñÈóÆÈ¢ò L ÊòØ NP-Complete ÁöÑÔºåÈÇ£‰πà L ÂÖ∑Â§á‰ª•‰∏ã‰∏§‰∏™ÊÄßË¥®Ôºö L ÊòØ NPÔºàÁªôÂÆö‰∏Ä‰∏™Ëß£ÂÜ≥ NP-Complete ÁöÑÊñπÊ°à (solutionÔºåÊÑüÂÖ¥Ë∂£ÁöÑËØªËÄÖÂèØ‰ª•ÊÄùËÄÉ‰∏Ä‰∏ã solution Âíå answer ÁöÑÂå∫Âà´)ÔºåÂèØ‰ª•ÂæàÂø´È™åËØÅÊòØÂê¶ÂèØË°åÔºå‰ΩÜ‰∏çÂ≠òÂú®Â∑≤Áü•È´òÊïàÁöÑÊñπÊ°à „ÄÇÔºâ NP ÈáåÁöÑ‰ªª‰ΩïÈóÆÈ¢òÂèØ‰ª•Âú®Â§öÈ°πÂºèÊó∂Èó¥ÂÜÖËΩ¨‰∏∫ L„ÄÇ ËÄå NP-Hard Âè™ÈúÄË¶ÅÂÖ∑Â§á NP-Complete ÁöÑÁ¨¨‰∫å‰∏™ÊÄßË¥®ÔºåÂõ†Ê≠§ NP-Complete ÊòØ NP-Hard ÁöÑÂ≠êÈõÜ„ÄÇ ËøôÂõõËÄÖÁöÑÂÖ≥Á≥ªÂ¶Ç‰∏ãÂõæÔºàÂÅáËÆæ P!= NPÔºâÔºö]]></content>
      <categories>
        <category>Á¨îËÆ∞</category>
      </categories>
      <tags>
        <tag>NP-Hard</tag>
      </tags>
  </entry>
</search>
